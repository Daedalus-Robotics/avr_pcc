#include "crc15can.hpp"

uint16_t crc15can_bit(uint16_t crc, void const *mem, size_t len) {
    unsigned char const *data = reinterpret_cast<unsigned char const*>(mem);
    if (data == NULL)
        return 0;
    for (size_t i = 0; i < len; i++) {
        crc ^= (uint16_t)data[i] << 7;
        for (unsigned k = 0; k < 8; k++) {
            crc = crc & 0x4000 ? (crc << 1) ^ 0x4599 : crc << 1;
        }
    }
    crc &= 0x7fff;
    return crc;
}

uint16_t crc15can_rem(uint16_t crc, unsigned val, unsigned bits) {
    val &= 0x100 - (0x100 >> bits) ;
    crc ^= (uint16_t)val << 7;
    for (unsigned i = 0; i < bits; i++) {
        crc = crc & 0x4000 ? (crc << 1) ^ 0x4599 : crc << 1;
    }
    crc &= 0x7fff;
    return crc;
}

static uint16_t const table_byte[] = {
    0x0000, 0x4599, 0x4eab, 0x0b32, 0x58cf, 0x1d56, 0x1664, 0x53fd, 0x7407, 0x319e,
    0x3aac, 0x7f35, 0x2cc8, 0x6951, 0x6263, 0x27fa, 0x2d97, 0x680e, 0x633c, 0x26a5,
    0x7558, 0x30c1, 0x3bf3, 0x7e6a, 0x5990, 0x1c09, 0x173b, 0x52a2, 0x015f, 0x44c6,
    0x4ff4, 0x0a6d, 0x5b2e, 0x1eb7, 0x1585, 0x501c, 0x03e1, 0x4678, 0x4d4a, 0x08d3,
    0x2f29, 0x6ab0, 0x6182, 0x241b, 0x77e6, 0x327f, 0x394d, 0x7cd4, 0x76b9, 0x3320,
    0x3812, 0x7d8b, 0x2e76, 0x6bef, 0x60dd, 0x2544, 0x02be, 0x4727, 0x4c15, 0x098c,
    0x5a71, 0x1fe8, 0x14da, 0x5143, 0x73c5, 0x365c, 0x3d6e, 0x78f7, 0x2b0a, 0x6e93,
    0x65a1, 0x2038, 0x07c2, 0x425b, 0x4969, 0x0cf0, 0x5f0d, 0x1a94, 0x11a6, 0x543f,
    0x5e52, 0x1bcb, 0x10f9, 0x5560, 0x069d, 0x4304, 0x4836, 0x0daf, 0x2a55, 0x6fcc,
    0x64fe, 0x2167, 0x729a, 0x3703, 0x3c31, 0x79a8, 0x28eb, 0x6d72, 0x6640, 0x23d9,
    0x7024, 0x35bd, 0x3e8f, 0x7b16, 0x5cec, 0x1975, 0x1247, 0x57de, 0x0423, 0x41ba,
    0x4a88, 0x0f11, 0x057c, 0x40e5, 0x4bd7, 0x0e4e, 0x5db3, 0x182a, 0x1318, 0x5681,
    0x717b, 0x34e2, 0x3fd0, 0x7a49, 0x29b4, 0x6c2d, 0x671f, 0x2286, 0x2213, 0x678a,
    0x6cb8, 0x2921, 0x7adc, 0x3f45, 0x3477, 0x71ee, 0x5614, 0x138d, 0x18bf, 0x5d26,
    0x0edb, 0x4b42, 0x4070, 0x05e9, 0x0f84, 0x4a1d, 0x412f, 0x04b6, 0x574b, 0x12d2,
    0x19e0, 0x5c79, 0x7b83, 0x3e1a, 0x3528, 0x70b1, 0x234c, 0x66d5, 0x6de7, 0x287e,
    0x793d, 0x3ca4, 0x3796, 0x720f, 0x21f2, 0x646b, 0x6f59, 0x2ac0, 0x0d3a, 0x48a3,
    0x4391, 0x0608, 0x55f5, 0x106c, 0x1b5e, 0x5ec7, 0x54aa, 0x1133, 0x1a01, 0x5f98,
    0x0c65, 0x49fc, 0x42ce, 0x0757, 0x20ad, 0x6534, 0x6e06, 0x2b9f, 0x7862, 0x3dfb,
    0x36c9, 0x7350, 0x51d6, 0x144f, 0x1f7d, 0x5ae4, 0x0919, 0x4c80, 0x47b2, 0x022b,
    0x25d1, 0x6048, 0x6b7a, 0x2ee3, 0x7d1e, 0x3887, 0x33b5, 0x762c, 0x7c41, 0x39d8,
    0x32ea, 0x7773, 0x248e, 0x6117, 0x6a25, 0x2fbc, 0x0846, 0x4ddf, 0x46ed, 0x0374,
    0x5089, 0x1510, 0x1e22, 0x5bbb, 0x0af8, 0x4f61, 0x4453, 0x01ca, 0x5237, 0x17ae,
    0x1c9c, 0x5905, 0x7eff, 0x3b66, 0x3054, 0x75cd, 0x2630, 0x63a9, 0x689b, 0x2d02,
    0x276f, 0x62f6, 0x69c4, 0x2c5d, 0x7fa0, 0x3a39, 0x310b, 0x7492, 0x5368, 0x16f1,
    0x1dc3, 0x585a, 0x0ba7, 0x4e3e, 0x450c, 0x0095
};

static uint16_t const table_word[][256] = {
   {0x0000, 0x328b, 0x569d, 0x6416, 0x9eb1, 0xac3a, 0xc82c, 0xfaa7, 0x0ee8, 0x3c63,
    0x5875, 0x6afe, 0x9059, 0xa2d2, 0xc6c4, 0xf44f, 0x2e5b, 0x1cd0, 0x78c6, 0x4a4d,
    0xb0ea, 0x8261, 0xe677, 0xd4fc, 0x20b3, 0x1238, 0x762e, 0x44a5, 0xbe02, 0x8c89,
    0xe89f, 0xda14, 0x5cb6, 0x6e3d, 0x0a2b, 0x38a0, 0xc207, 0xf08c, 0x949a, 0xa611,
    0x525e, 0x60d5, 0x04c3, 0x3648, 0xccef, 0xfe64, 0x9a72, 0xa8f9, 0x72ed, 0x4066,
    0x2470, 0x16fb, 0xec5c, 0xded7, 0xbac1, 0x884a, 0x7c05, 0x4e8e, 0x2a98, 0x1813,
    0xe2b4, 0xd03f, 0xb429, 0x86a2, 0x8ae7, 0xb86c, 0xdc7a, 0xeef1, 0x1456, 0x26dd,
    0x42cb, 0x7040, 0x840f, 0xb684, 0xd292, 0xe019, 0x1abe, 0x2835, 0x4c23, 0x7ea8,
    0xa4bc, 0x9637, 0xf221, 0xc0aa, 0x3a0d, 0x0886, 0x6c90, 0x5e1b, 0xaa54, 0x98df,
    0xfcc9, 0xce42, 0x34e5, 0x066e, 0x6278, 0x50f3, 0xd651, 0xe4da, 0x80cc, 0xb247,
    0x48e0, 0x7a6b, 0x1e7d, 0x2cf6, 0xd8b9, 0xea32, 0x8e24, 0xbcaf, 0x4608, 0x7483,
    0x1095, 0x221e, 0xf80a, 0xca81, 0xae97, 0x9c1c, 0x66bb, 0x5430, 0x3026, 0x02ad,
    0xf6e2, 0xc469, 0xa07f, 0x92f4, 0x6853, 0x5ad8, 0x3ece, 0x0c45, 0x2644, 0x14cf,
    0x70d9, 0x4252, 0xb8f5, 0x8a7e, 0xee68, 0xdce3, 0x28ac, 0x1a27, 0x7e31, 0x4cba,
    0xb61d, 0x8496, 0xe080, 0xd20b, 0x081f, 0x3a94, 0x5e82, 0x6c09, 0x96ae, 0xa425,
    0xc033, 0xf2b8, 0x06f7, 0x347c, 0x506a, 0x62e1, 0x9846, 0xaacd, 0xcedb, 0xfc50,
    0x7af2, 0x4879, 0x2c6f, 0x1ee4, 0xe443, 0xd6c8, 0xb2de, 0x8055, 0x741a, 0x4691,
    0x2287, 0x100c, 0xeaab, 0xd820, 0xbc36, 0x8ebd, 0x54a9, 0x6622, 0x0234, 0x30bf,
    0xca18, 0xf893, 0x9c85, 0xae0e, 0x5a41, 0x68ca, 0x0cdc, 0x3e57, 0xc4f0, 0xf67b,
    0x926d, 0xa0e6, 0xaca3, 0x9e28, 0xfa3e, 0xc8b5, 0x3212, 0x0099, 0x648f, 0x5604,
    0xa24b, 0x90c0, 0xf4d6, 0xc65d, 0x3cfa, 0x0e71, 0x6a67, 0x58ec, 0x82f8, 0xb073,
    0xd465, 0xe6ee, 0x1c49, 0x2ec2, 0x4ad4, 0x785f, 0x8c10, 0xbe9b, 0xda8d, 0xe806,
    0x12a1, 0x202a, 0x443c, 0x76b7, 0xf015, 0xc29e, 0xa688, 0x9403, 0x6ea4, 0x5c2f,
    0x3839, 0x0ab2, 0xfefd, 0xcc76, 0xa860, 0x9aeb, 0x604c, 0x52c7, 0x36d1, 0x045a,
    0xde4e, 0xecc5, 0x88d3, 0xba58, 0x40ff, 0x7274, 0x1662, 0x24e9, 0xd0a6, 0xe22d,
    0x863b, 0xb4b0, 0x4e17, 0x7c9c, 0x188a, 0x2a01},
   {0x0000, 0x4c88, 0xaa9b, 0xe613, 0x66bc, 0x2a34, 0xcc27, 0x80af, 0xfef3, 0xb27b,
    0x5468, 0x18e0, 0x984f, 0xd4c7, 0x32d4, 0x7e5c, 0xce6c, 0x82e4, 0x64f7, 0x287f,
    0xa8d0, 0xe458, 0x024b, 0x4ec3, 0x309f, 0x7c17, 0x9a04, 0xd68c, 0x5623, 0x1aab,
    0xfcb8, 0xb030, 0x9cd9, 0xd051, 0x3642, 0x7aca, 0xfa65, 0xb6ed, 0x50fe, 0x1c76,
    0x622a, 0x2ea2, 0xc8b1, 0x8439, 0x0496, 0x481e, 0xae0d, 0xe285, 0x52b5, 0x1e3d,
    0xf82e, 0xb4a6, 0x3409, 0x7881, 0x9e92, 0xd21a, 0xac46, 0xe0ce, 0x06dd, 0x4a55,
    0xcafa, 0x8672, 0x6061, 0x2ce9, 0x0a38, 0x46b0, 0xa0a3, 0xec2b, 0x6c84, 0x200c,
    0xc61f, 0x8a97, 0xf4cb, 0xb843, 0x5e50, 0x12d8, 0x9277, 0xdeff, 0x38ec, 0x7464,
    0xc454, 0x88dc, 0x6ecf, 0x2247, 0xa2e8, 0xee60, 0x0873, 0x44fb, 0x3aa7, 0x762f,
    0x903c, 0xdcb4, 0x5c1b, 0x1093, 0xf680, 0xba08, 0x96e1, 0xda69, 0x3c7a, 0x70f2,
    0xf05d, 0xbcd5, 0x5ac6, 0x164e, 0x6812, 0x249a, 0xc289, 0x8e01, 0x0eae, 0x4226,
    0xa435, 0xe8bd, 0x588d, 0x1405, 0xf216, 0xbe9e, 0x3e31, 0x72b9, 0x94aa, 0xd822,
    0xa67e, 0xeaf6, 0x0ce5, 0x406d, 0xc0c2, 0x8c4a, 0x6a59, 0x26d1, 0x1470, 0x58f8,
    0xbeeb, 0xf263, 0x72cc, 0x3e44, 0xd857, 0x94df, 0xea83, 0xa60b, 0x4018, 0x0c90,
    0x8c3f, 0xc0b7, 0x26a4, 0x6a2c, 0xda1c, 0x9694, 0x7087, 0x3c0f, 0xbca0, 0xf028,
    0x163b, 0x5ab3, 0x24ef, 0x6867, 0x8e74, 0xc2fc, 0x4253, 0x0edb, 0xe8c8, 0xa440,
    0x88a9, 0xc421, 0x2232, 0x6eba, 0xee15, 0xa29d, 0x448e, 0x0806, 0x765a, 0x3ad2,
    0xdcc1, 0x9049, 0x10e6, 0x5c6e, 0xba7d, 0xf6f5, 0x46c5, 0x0a4d, 0xec5e, 0xa0d6,
    0x2079, 0x6cf1, 0x8ae2, 0xc66a, 0xb836, 0xf4be, 0x12ad, 0x5e25, 0xde8a, 0x9202,
    0x7411, 0x3899, 0x1e48, 0x52c0, 0xb4d3, 0xf85b, 0x78f4, 0x347c, 0xd26f, 0x9ee7,
    0xe0bb, 0xac33, 0x4a20, 0x06a8, 0x8607, 0xca8f, 0x2c9c, 0x6014, 0xd024, 0x9cac,
    0x7abf, 0x3637, 0xb698, 0xfa10, 0x1c03, 0x508b, 0x2ed7, 0x625f, 0x844c, 0xc8c4,
    0x486b, 0x04e3, 0xe2f0, 0xae78, 0x8291, 0xce19, 0x280a, 0x6482, 0xe42d, 0xa8a5,
    0x4eb6, 0x023e, 0x7c62, 0x30ea, 0xd6f9, 0x9a71, 0x1ade, 0x5656, 0xb045, 0xfccd,
    0x4cfd, 0x0075, 0xe666, 0xaaee, 0x2a41, 0x66c9, 0x80da, 0xcc52, 0xb20e, 0xfe86,
    0x1895, 0x541d, 0xd4b2, 0x983a, 0x7e29, 0x32a1},
   {0x0000, 0x28e0, 0x624b, 0x4aab, 0xc496, 0xec76, 0xa6dd, 0x8e3d, 0xbaa6, 0x9246,
    0xd8ed, 0xf00d, 0x7e30, 0x56d0, 0x1c7b, 0x349b, 0x46c6, 0x6e26, 0x248d, 0x0c6d,
    0x8250, 0xaab0, 0xe01b, 0xc8fb, 0xfc60, 0xd480, 0x9e2b, 0xb6cb, 0x38f6, 0x1016,
    0x5abd, 0x725d, 0xbe07, 0x96e7, 0xdc4c, 0xf4ac, 0x7a91, 0x5271, 0x18da, 0x303a,
    0x04a1, 0x2c41, 0x66ea, 0x4e0a, 0xc037, 0xe8d7, 0xa27c, 0x8a9c, 0xf8c1, 0xd021,
    0x9a8a, 0xb26a, 0x3c57, 0x14b7, 0x5e1c, 0x76fc, 0x4267, 0x6a87, 0x202c, 0x08cc,
    0x86f1, 0xae11, 0xe4ba, 0xcc5a, 0x7c0f, 0x54ef, 0x1e44, 0x36a4, 0xb899, 0x9079,
    0xdad2, 0xf232, 0xc6a9, 0xee49, 0xa4e2, 0x8c02, 0x023f, 0x2adf, 0x6074, 0x4894,
    0x3ac9, 0x1229, 0x5882, 0x7062, 0xfe5f, 0xd6bf, 0x9c14, 0xb4f4, 0x806f, 0xa88f,
    0xe224, 0xcac4, 0x44f9, 0x6c19, 0x26b2, 0x0e52, 0xc208, 0xeae8, 0xa043, 0x88a3,
    0x069e, 0x2e7e, 0x64d5, 0x4c35, 0x78ae, 0x504e, 0x1ae5, 0x3205, 0xbc38, 0x94d8,
    0xde73, 0xf693, 0x84ce, 0xac2e, 0xe685, 0xce65, 0x4058, 0x68b8, 0x2213, 0x0af3,
    0x3e68, 0x1688, 0x5c23, 0x74c3, 0xfafe, 0xd21e, 0x98b5, 0xb055, 0xf81e, 0xd0fe,
    0x9a55, 0xb2b5, 0x3c88, 0x1468, 0x5ec3, 0x7623, 0x42b8, 0x6a58, 0x20f3, 0x0813,
    0x862e, 0xaece, 0xe465, 0xcc85, 0xbed8, 0x9638, 0xdc93, 0xf473, 0x7a4e, 0x52ae,
    0x1805, 0x30e5, 0x047e, 0x2c9e, 0x6635, 0x4ed5, 0xc0e8, 0xe808, 0xa2a3, 0x8a43,
    0x4619, 0x6ef9, 0x2452, 0x0cb2, 0x828f, 0xaa6f, 0xe0c4, 0xc824, 0xfcbf, 0xd45f,
    0x9ef4, 0xb614, 0x3829, 0x10c9, 0x5a62, 0x7282, 0x00df, 0x283f, 0x6294, 0x4a74,
    0xc449, 0xeca9, 0xa602, 0x8ee2, 0xba79, 0x9299, 0xd832, 0xf0d2, 0x7eef, 0x560f,
    0x1ca4, 0x3444, 0x8411, 0xacf1, 0xe65a, 0xceba, 0x4087, 0x6867, 0x22cc, 0x0a2c,
    0x3eb7, 0x1657, 0x5cfc, 0x741c, 0xfa21, 0xd2c1, 0x986a, 0xb08a, 0xc2d7, 0xea37,
    0xa09c, 0x887c, 0x0641, 0x2ea1, 0x640a, 0x4cea, 0x7871, 0x5091, 0x1a3a, 0x32da,
    0xbce7, 0x9407, 0xdeac, 0xf64c, 0x3a16, 0x12f6, 0x585d, 0x70bd, 0xfe80, 0xd660,
    0x9ccb, 0xb42b, 0x80b0, 0xa850, 0xe2fb, 0xca1b, 0x4426, 0x6cc6, 0x266d, 0x0e8d,
    0x7cd0, 0x5430, 0x1e9b, 0x367b, 0xb846, 0x90a6, 0xda0d, 0xf2ed, 0xc676, 0xee96,
    0xa43d, 0x8cdd, 0x02e0, 0x2a00, 0x60ab, 0x484b},
   {0x0000, 0xf03d, 0xe07b, 0x1046, 0xc0f7, 0x30ca, 0x208c, 0xd0b1, 0xb264, 0x4259,
    0x521f, 0xa222, 0x7293, 0x82ae, 0x92e8, 0x62d5, 0x64c9, 0x94f4, 0x84b2, 0x748f,
    0xa43e, 0x5403, 0x4445, 0xb478, 0xd6ad, 0x2690, 0x36d6, 0xc6eb, 0x165a, 0xe667,
    0xf621, 0x061c, 0xfa19, 0x0a24, 0x1a62, 0xea5f, 0x3aee, 0xcad3, 0xda95, 0x2aa8,
    0x487d, 0xb840, 0xa806, 0x583b, 0x888a, 0x78b7, 0x68f1, 0x98cc, 0x9ed0, 0x6eed,
    0x7eab, 0x8e96, 0x5e27, 0xae1a, 0xbe5c, 0x4e61, 0x2cb4, 0xdc89, 0xcccf, 0x3cf2,
    0xec43, 0x1c7e, 0x0c38, 0xfc05, 0xf433, 0x040e, 0x1448, 0xe475, 0x34c4, 0xc4f9,
    0xd4bf, 0x2482, 0x4657, 0xb66a, 0xa62c, 0x5611, 0x86a0, 0x769d, 0x66db, 0x96e6,
    0x90fa, 0x60c7, 0x7081, 0x80bc, 0x500d, 0xa030, 0xb076, 0x404b, 0x229e, 0xd2a3,
    0xc2e5, 0x32d8, 0xe269, 0x1254, 0x0212, 0xf22f, 0x0e2a, 0xfe17, 0xee51, 0x1e6c,
    0xcedd, 0x3ee0, 0x2ea6, 0xde9b, 0xbc4e, 0x4c73, 0x5c35, 0xac08, 0x7cb9, 0x8c84,
    0x9cc2, 0x6cff, 0x6ae3, 0x9ade, 0x8a98, 0x7aa5, 0xaa14, 0x5a29, 0x4a6f, 0xba52,
    0xd887, 0x28ba, 0x38fc, 0xc8c1, 0x1870, 0xe84d, 0xf80b, 0x0836, 0xe867, 0x185a,
    0x081c, 0xf821, 0x2890, 0xd8ad, 0xc8eb, 0x38d6, 0x5a03, 0xaa3e, 0xba78, 0x4a45,
    0x9af4, 0x6ac9, 0x7a8f, 0x8ab2, 0x8cae, 0x7c93, 0x6cd5, 0x9ce8, 0x4c59, 0xbc64,
    0xac22, 0x5c1f, 0x3eca, 0xcef7, 0xdeb1, 0x2e8c, 0xfe3d, 0x0e00, 0x1e46, 0xee7b,
    0x127e, 0xe243, 0xf205, 0x0238, 0xd289, 0x22b4, 0x32f2, 0xc2cf, 0xa01a, 0x5027,
    0x4061, 0xb05c, 0x60ed, 0x90d0, 0x8096, 0x70ab, 0x76b7, 0x868a, 0x96cc, 0x66f1,
    0xb640, 0x467d, 0x563b, 0xa606, 0xc4d3, 0x34ee, 0x24a8, 0xd495, 0x0424, 0xf419,
    0xe45f, 0x1462, 0x1c54, 0xec69, 0xfc2f, 0x0c12, 0xdca3, 0x2c9e, 0x3cd8, 0xcce5,
    0xae30, 0x5e0d, 0x4e4b, 0xbe76, 0x6ec7, 0x9efa, 0x8ebc, 0x7e81, 0x789d, 0x88a0,
    0x98e6, 0x68db, 0xb86a, 0x4857, 0x5811, 0xa82c, 0xcaf9, 0x3ac4, 0x2a82, 0xdabf,
    0x0a0e, 0xfa33, 0xea75, 0x1a48, 0xe64d, 0x1670, 0x0636, 0xf60b, 0x26ba, 0xd687,
    0xc6c1, 0x36fc, 0x5429, 0xa414, 0xb452, 0x446f, 0x94de, 0x64e3, 0x74a5, 0x8498,
    0x8284, 0x72b9, 0x62ff, 0x92c2, 0x4273, 0xb24e, 0xa208, 0x5235, 0x30e0, 0xc0dd,
    0xd09b, 0x20a6, 0xf017, 0x002a, 0x106c, 0xe051},
   {0x0000, 0xd0cf, 0x9214, 0x42db, 0x2429, 0xf4e6, 0xb63d, 0x66f2, 0x4852, 0x989d,
    0xda46, 0x0a89, 0x6c7b, 0xbcb4, 0xfe6f, 0x2ea0, 0x90a4, 0x406b, 0x02b0, 0xd27f,
    0xb48d, 0x6442, 0x2699, 0xf656, 0xd8f6, 0x0839, 0x4ae2, 0x9a2d, 0xfcdf, 0x2c10,
    0x6ecb, 0xbe04, 0x12c2, 0xc20d, 0x80d6, 0x5019, 0x36eb, 0xe624, 0xa4ff, 0x7430,
    0x5a90, 0x8a5f, 0xc884, 0x184b, 0x7eb9, 0xae76, 0xecad, 0x3c62, 0x8266, 0x52a9,
    0x1072, 0xc0bd, 0xa64f, 0x7680, 0x345b, 0xe494, 0xca34, 0x1afb, 0x5820, 0x88ef,
    0xee1d, 0x3ed2, 0x7c09, 0xacc6, 0x160f, 0xc6c0, 0x841b, 0x54d4, 0x3226, 0xe2e9,
    0xa032, 0x70fd, 0x5e5d, 0x8e92, 0xcc49, 0x1c86, 0x7a74, 0xaabb, 0xe860, 0x38af,
    0x86ab, 0x5664, 0x14bf, 0xc470, 0xa282, 0x724d, 0x3096, 0xe059, 0xcef9, 0x1e36,
    0x5ced, 0x8c22, 0xead0, 0x3a1f, 0x78c4, 0xa80b, 0x04cd, 0xd402, 0x96d9, 0x4616,
    0x20e4, 0xf02b, 0xb2f0, 0x623f, 0x4c9f, 0x9c50, 0xde8b, 0x0e44, 0x68b6, 0xb879,
    0xfaa2, 0x2a6d, 0x9469, 0x44a6, 0x067d, 0xd6b2, 0xb040, 0x608f, 0x2254, 0xf29b,
    0xdc3b, 0x0cf4, 0x4e2f, 0x9ee0, 0xf812, 0x28dd, 0x6a06, 0xbac9, 0x2c1e, 0xfcd1,
    0xbe0a, 0x6ec5, 0x0837, 0xd8f8, 0x9a23, 0x4aec, 0x644c, 0xb483, 0xf658, 0x2697,
    0x4065, 0x90aa, 0xd271, 0x02be, 0xbcba, 0x6c75, 0x2eae, 0xfe61, 0x9893, 0x485c,
    0x0a87, 0xda48, 0xf4e8, 0x2427, 0x66fc, 0xb633, 0xd0c1, 0x000e, 0x42d5, 0x921a,
    0x3edc, 0xee13, 0xacc8, 0x7c07, 0x1af5, 0xca3a, 0x88e1, 0x582e, 0x768e, 0xa641,
    0xe49a, 0x3455, 0x52a7, 0x8268, 0xc0b3, 0x107c, 0xae78, 0x7eb7, 0x3c6c, 0xeca3,
    0x8a51, 0x5a9e, 0x1845, 0xc88a, 0xe62a, 0x36e5, 0x743e, 0xa4f1, 0xc203, 0x12cc,
    0x5017, 0x80d8, 0x3a11, 0xeade, 0xa805, 0x78ca, 0x1e38, 0xcef7, 0x8c2c, 0x5ce3,
    0x7243, 0xa28c, 0xe057, 0x3098, 0x566a, 0x86a5, 0xc47e, 0x14b1, 0xaab5, 0x7a7a,
    0x38a1, 0xe86e, 0x8e9c, 0x5e53, 0x1c88, 0xcc47, 0xe2e7, 0x3228, 0x70f3, 0xa03c,
    0xc6ce, 0x1601, 0x54da, 0x8415, 0x28d3, 0xf81c, 0xbac7, 0x6a08, 0x0cfa, 0xdc35,
    0x9eee, 0x4e21, 0x6081, 0xb04e, 0xf295, 0x225a, 0x44a8, 0x9467, 0xd6bc, 0x0673,
    0xb877, 0x68b8, 0x2a63, 0xfaac, 0x9c5e, 0x4c91, 0x0e4a, 0xde85, 0xf025, 0x20ea,
    0x6231, 0xb2fe, 0xd40c, 0x04c3, 0x4618, 0x96d7},
   {0x0000, 0x583c, 0xb078, 0xe844, 0x60f1, 0x38cd, 0xd089, 0x88b5, 0xf269, 0xaa55,
    0x4211, 0x1a2d, 0x9298, 0xcaa4, 0x22e0, 0x7adc, 0xe4d3, 0xbcef, 0x54ab, 0x0c97,
    0x8422, 0xdc1e, 0x345a, 0x6c66, 0x16ba, 0x4e86, 0xa6c2, 0xfefe, 0x764b, 0x2e77,
    0xc633, 0x9e0f, 0xfa2c, 0xa210, 0x4a54, 0x1268, 0x9add, 0xc2e1, 0x2aa5, 0x7299,
    0x0845, 0x5079, 0xb83d, 0xe001, 0x68b4, 0x3088, 0xd8cc, 0x80f0, 0x1eff, 0x46c3,
    0xae87, 0xf6bb, 0x7e0e, 0x2632, 0xce76, 0x964a, 0xec96, 0xb4aa, 0x5cee, 0x04d2,
    0x8c67, 0xd45b, 0x3c1f, 0x6423, 0xf459, 0xac65, 0x4421, 0x1c1d, 0x94a8, 0xcc94,
    0x24d0, 0x7cec, 0x0630, 0x5e0c, 0xb648, 0xee74, 0x66c1, 0x3efd, 0xd6b9, 0x8e85,
    0x108a, 0x48b6, 0xa0f2, 0xf8ce, 0x707b, 0x2847, 0xc003, 0x983f, 0xe2e3, 0xbadf,
    0x529b, 0x0aa7, 0x8212, 0xda2e, 0x326a, 0x6a56, 0x0e75, 0x5649, 0xbe0d, 0xe631,
    0x6e84, 0x36b8, 0xdefc, 0x86c0, 0xfc1c, 0xa420, 0x4c64, 0x1458, 0x9ced, 0xc4d1,
    0x2c95, 0x74a9, 0xeaa6, 0xb29a, 0x5ade, 0x02e2, 0x8a57, 0xd26b, 0x3a2f, 0x6213,
    0x18cf, 0x40f3, 0xa8b7, 0xf08b, 0x783e, 0x2002, 0xc846, 0x907a, 0xe8b3, 0xb08f,
    0x58cb, 0x00f7, 0x8842, 0xd07e, 0x383a, 0x6006, 0x1ada, 0x42e6, 0xaaa2, 0xf29e,
    0x7a2b, 0x2217, 0xca53, 0x926f, 0x0c60, 0x545c, 0xbc18, 0xe424, 0x6c91, 0x34ad,
    0xdce9, 0x84d5, 0xfe09, 0xa635, 0x4e71, 0x164d, 0x9ef8, 0xc6c4, 0x2e80, 0x76bc,
    0x129f, 0x4aa3, 0xa2e7, 0xfadb, 0x726e, 0x2a52, 0xc216, 0x9a2a, 0xe0f6, 0xb8ca,
    0x508e, 0x08b2, 0x8007, 0xd83b, 0x307f, 0x6843, 0xf64c, 0xae70, 0x4634, 0x1e08,
    0x96bd, 0xce81, 0x26c5, 0x7ef9, 0x0425, 0x5c19, 0xb45d, 0xec61, 0x64d4, 0x3ce8,
    0xd4ac, 0x8c90, 0x1cea, 0x44d6, 0xac92, 0xf4ae, 0x7c1b, 0x2427, 0xcc63, 0x945f,
    0xee83, 0xb6bf, 0x5efb, 0x06c7, 0x8e72, 0xd64e, 0x3e0a, 0x6636, 0xf839, 0xa005,
    0x4841, 0x107d, 0x98c8, 0xc0f4, 0x28b0, 0x708c, 0x0a50, 0x526c, 0xba28, 0xe214,
    0x6aa1, 0x329d, 0xdad9, 0x82e5, 0xe6c6, 0xbefa, 0x56be, 0x0e82, 0x8637, 0xde0b,
    0x364f, 0x6e73, 0x14af, 0x4c93, 0xa4d7, 0xfceb, 0x745e, 0x2c62, 0xc426, 0x9c1a,
    0x0215, 0x5a29, 0xb26d, 0xea51, 0x62e4, 0x3ad8, 0xd29c, 0x8aa0, 0xf07c, 0xa840,
    0x4004, 0x1838, 0x908d, 0xc8b1, 0x20f5, 0x78c9},
   {0x0000, 0xe2ec, 0xf652, 0x14be, 0xeca5, 0x0e49, 0x1af7, 0xf81b, 0xeac0, 0x082c,
    0x1c92, 0xfe7e, 0x0665, 0xe489, 0xf037, 0x12db, 0xe60a, 0x04e6, 0x1058, 0xf2b4,
    0x0aaf, 0xe843, 0xfcfd, 0x1e11, 0x0cca, 0xee26, 0xfa98, 0x1874, 0xe06f, 0x0283,
    0x163d, 0xf4d1, 0xcc15, 0x2ef9, 0x3a47, 0xd8ab, 0x20b0, 0xc25c, 0xd6e2, 0x340e,
    0x26d5, 0xc439, 0xd087, 0x326b, 0xca70, 0x289c, 0x3c22, 0xdece, 0x2a1f, 0xc8f3,
    0xdc4d, 0x3ea1, 0xc6ba, 0x2456, 0x30e8, 0xd204, 0xc0df, 0x2233, 0x368d, 0xd461,
    0x2c7a, 0xce96, 0xda28, 0x38c4, 0x982b, 0x7ac7, 0x6e79, 0x8c95, 0x748e, 0x9662,
    0x82dc, 0x6030, 0x72eb, 0x9007, 0x84b9, 0x6655, 0x9e4e, 0x7ca2, 0x681c, 0x8af0,
    0x7e21, 0x9ccd, 0x8873, 0x6a9f, 0x9284, 0x7068, 0x64d6, 0x863a, 0x94e1, 0x760d,
    0x62b3, 0x805f, 0x7844, 0x9aa8, 0x8e16, 0x6cfa, 0x543e, 0xb6d2, 0xa26c, 0x4080,
    0xb89b, 0x5a77, 0x4ec9, 0xac25, 0xbefe, 0x5c12, 0x48ac, 0xaa40, 0x525b, 0xb0b7,
    0xa409, 0x46e5, 0xb234, 0x50d8, 0x4466, 0xa68a, 0x5e91, 0xbc7d, 0xa8c3, 0x4a2f,
    0x58f4, 0xba18, 0xaea6, 0x4c4a, 0xb451, 0x56bd, 0x4203, 0xa0ef, 0x3057, 0xd2bb,
    0xc605, 0x24e9, 0xdcf2, 0x3e1e, 0x2aa0, 0xc84c, 0xda97, 0x387b, 0x2cc5, 0xce29,
    0x3632, 0xd4de, 0xc060, 0x228c, 0xd65d, 0x34b1, 0x200f, 0xc2e3, 0x3af8, 0xd814,
    0xccaa, 0x2e46, 0x3c9d, 0xde71, 0xcacf, 0x2823, 0xd038, 0x32d4, 0x266a, 0xc486,
    0xfc42, 0x1eae, 0x0a10, 0xe8fc, 0x10e7, 0xf20b, 0xe6b5, 0x0459, 0x1682, 0xf46e,
    0xe0d0, 0x023c, 0xfa27, 0x18cb, 0x0c75, 0xee99, 0x1a48, 0xf8a4, 0xec1a, 0x0ef6,
    0xf6ed, 0x1401, 0x00bf, 0xe253, 0xf088, 0x1264, 0x06da, 0xe436, 0x1c2d, 0xfec1,
    0xea7f, 0x0893, 0xa87c, 0x4a90, 0x5e2e, 0xbcc2, 0x44d9, 0xa635, 0xb28b, 0x5067,
    0x42bc, 0xa050, 0xb4ee, 0x5602, 0xae19, 0x4cf5, 0x584b, 0xbaa7, 0x4e76, 0xac9a,
    0xb824, 0x5ac8, 0xa2d3, 0x403f, 0x5481, 0xb66d, 0xa4b6, 0x465a, 0x52e4, 0xb008,
    0x4813, 0xaaff, 0xbe41, 0x5cad, 0x6469, 0x8685, 0x923b, 0x70d7, 0x88cc, 0x6a20,
    0x7e9e, 0x9c72, 0x8ea9, 0x6c45, 0x78fb, 0x9a17, 0x620c, 0x80e0, 0x945e, 0x76b2,
    0x8263, 0x608f, 0x7431, 0x96dd, 0x6ec6, 0x8c2a, 0x9894, 0x7a78, 0x68a3, 0x8a4f,
    0x9ef1, 0x7c1d, 0x8406, 0x66ea, 0x7254, 0x90b8},
   {0x0000, 0x60ae, 0xf2d7, 0x9279, 0xd624, 0xb68a, 0x24f3, 0x445d, 0xac49, 0xcce7,
    0x5e9e, 0x3e30, 0x7a6d, 0x1ac3, 0x88ba, 0xe814, 0x5893, 0x383d, 0xaa44, 0xcaea,
    0x8eb7, 0xee19, 0x7c60, 0x1cce, 0xf4da, 0x9474, 0x060d, 0x66a3, 0x22fe, 0x4250,
    0xd029, 0xb087, 0x82ad, 0xe203, 0x707a, 0x10d4, 0x5489, 0x3427, 0xa65e, 0xc6f0,
    0x2ee4, 0x4e4a, 0xdc33, 0xbc9d, 0xf8c0, 0x986e, 0x0a17, 0x6ab9, 0xda3e, 0xba90,
    0x28e9, 0x4847, 0x0c1a, 0x6cb4, 0xfecd, 0x9e63, 0x7677, 0x16d9, 0x84a0, 0xe40e,
    0xa053, 0xc0fd, 0x5284, 0x322a, 0x36d0, 0x567e, 0xc407, 0xa4a9, 0xe0f4, 0x805a,
    0x1223, 0x728d, 0x9a99, 0xfa37, 0x684e, 0x08e0, 0x4cbd, 0x2c13, 0xbe6a, 0xdec4,
    0x6e43, 0x0eed, 0x9c94, 0xfc3a, 0xb867, 0xd8c9, 0x4ab0, 0x2a1e, 0xc20a, 0xa2a4,
    0x30dd, 0x5073, 0x142e, 0x7480, 0xe6f9, 0x8657, 0xb47d, 0xd4d3, 0x46aa, 0x2604,
    0x6259, 0x02f7, 0x908e, 0xf020, 0x1834, 0x789a, 0xeae3, 0x8a4d, 0xce10, 0xaebe,
    0x3cc7, 0x5c69, 0xecee, 0x8c40, 0x1e39, 0x7e97, 0x3aca, 0x5a64, 0xc81d, 0xa8b3,
    0x40a7, 0x2009, 0xb270, 0xd2de, 0x9683, 0xf62d, 0x6454, 0x04fa, 0x5e2b, 0x3e85,
    0xacfc, 0xcc52, 0x880f, 0xe8a1, 0x7ad8, 0x1a76, 0xf262, 0x92cc, 0x00b5, 0x601b,
    0x2446, 0x44e8, 0xd691, 0xb63f, 0x06b8, 0x6616, 0xf46f, 0x94c1, 0xd09c, 0xb032,
    0x224b, 0x42e5, 0xaaf1, 0xca5f, 0x5826, 0x3888, 0x7cd5, 0x1c7b, 0x8e02, 0xeeac,
    0xdc86, 0xbc28, 0x2e51, 0x4eff, 0x0aa2, 0x6a0c, 0xf875, 0x98db, 0x70cf, 0x1061,
    0x8218, 0xe2b6, 0xa6eb, 0xc645, 0x543c, 0x3492, 0x8415, 0xe4bb, 0x76c2, 0x166c,
    0x5231, 0x329f, 0xa0e6, 0xc048, 0x285c, 0x48f2, 0xda8b, 0xba25, 0xfe78, 0x9ed6,
    0x0caf, 0x6c01, 0x68fb, 0x0855, 0x9a2c, 0xfa82, 0xbedf, 0xde71, 0x4c08, 0x2ca6,
    0xc4b2, 0xa41c, 0x3665, 0x56cb, 0x1296, 0x7238, 0xe041, 0x80ef, 0x3068, 0x50c6,
    0xc2bf, 0xa211, 0xe64c, 0x86e2, 0x149b, 0x7435, 0x9c21, 0xfc8f, 0x6ef6, 0x0e58,
    0x4a05, 0x2aab, 0xb8d2, 0xd87c, 0xea56, 0x8af8, 0x1881, 0x782f, 0x3c72, 0x5cdc,
    0xcea5, 0xae0b, 0x461f, 0x26b1, 0xb4c8, 0xd466, 0x903b, 0xf095, 0x62ec, 0x0242,
    0xb2c5, 0xd26b, 0x4012, 0x20bc, 0x64e1, 0x044f, 0x9636, 0xf698, 0x1e8c, 0x7e22,
    0xec5b, 0x8cf5, 0xc8a8, 0xa806, 0x3a7f, 0x5ad1}
};

uint16_t crc15can_byte(uint16_t crc, void const *mem, size_t len) {
    unsigned char const *data = reinterpret_cast<unsigned char const*>(mem);
    if (data == NULL)
        return 0;
    for (size_t i = 0; i < len; i++) {
        crc = (crc << 8) ^
              table_byte[((crc >> 7) ^ data[i]) & 0xff];
    }
    crc &= 0x7fff;
    return crc;
}

static inline uint16_t swaplow(uint16_t crc) {
    return
        ((crc & 0xff) << 8) +
        ((crc & 0xff00) >> 8);
}

// This code assumes that integers are stored little-endian.

uint16_t crc15can_word(uint16_t crc, void const *mem, size_t len) {
    unsigned char const *data = reinterpret_cast<unsigned char const*>(mem);
    if (data == NULL)
        return 0;
    while (len && ((ptrdiff_t)data & 0x7)) {
        len--;
        crc = (crc << 8) ^
              table_byte[((crc >> 7) ^ *data++) & 0xff];
    }
    crc <<= 1;
    crc = swaplow(crc);
    size_t n = len >> 3;
    for (size_t i = 0; i < n; i++) {
        uint64_t word = crc ^ ((uint64_t const *)data)[i];
        crc = table_word[7][word & 0xff] ^
              table_word[6][(word >> 8) & 0xff] ^
              table_word[5][(word >> 16) & 0xff] ^
              table_word[4][(word >> 24) & 0xff] ^
              table_word[3][(word >> 32) & 0xff] ^
              table_word[2][(word >> 40) & 0xff] ^
              table_word[1][(word >> 48) & 0xff] ^
              table_word[0][word >> 56];
    }
    data += n << 3;
    len &= 7;
    crc = swaplow(crc);
    crc >>= 1;
    while (len) {
        len--;
        crc = (crc << 8) ^
              table_byte[((crc >> 7) ^ *data++) & 0xff];
    }
    crc &= 0x7fff;
    return crc;
}

static uint16_t multmodp(uint16_t a, uint16_t b) {
    uint16_t prod = 0;
    for (;;) {
        if (a & 1) {
            prod ^= b;
            if (a == 1)
                break;
        }
        a >>= 1;
        b = b & 0x4000 ? (b << 1) ^ 0x4599 : b << 1;
    }
    prod &= 0x7fff;
    return prod;
}

static uint16_t const table_comb[] = {
    0x0002, 0x0004, 0x0010, 0x0100, 0x4eab, 0x25b1, 0x297b
};

static uint16_t x8nmodp(uintmax_t n) {
    uint16_t xp = 1;
    int k = 3;
    for (;;) {
        if (n & 1)
            xp = multmodp(table_comb[k], xp);
        n >>= 1;
        if (n == 0)
            break;
        if (++k == 7)
            k = 0;
    }
    return xp;
}

uint16_t crc15can_comb(uint16_t crc1, uint16_t crc2,
        uintmax_t len2) {
    return multmodp(x8nmodp(len2), crc1) ^ crc2;
}
